---
image: fedora:latest
stages:
  - build_docker
  - build_pdf
  - build_png 
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
  GIT_HOST: github.com
  #GIT_HOST: gitlab.com
  
####################################
#   Build Fedora texlive image 
####################################
build_docker:
  image: docker:stable
  stage: build_docker
  services:
    - docker:stable-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - apk --no-cache add make

  script:
    - make docker_build
    - docker tag resume $IMAGE_TAG
    - docker push $IMAGE_TAG

  after_script:
    - cat build.log

  when: manual

####################################
#   Build template 
####################################
.build_artifacts: &build_artifacts
  image: 
    name: $IMAGE_TAG
    entrypoint: []
  services: []

  variables:
    GIT_STRAGEGY: fetch
    GIT_CHECKOUT: "true"

  after_script:
    - cat build.log

####################################
#   Build PDF
####################################
build_pdf:
  <<: *build_artifacts
  stage: build_pdf
  script:
    - rm -f *.pdf
    - make resume.pdf
  artifacts:
    expire_in: '300'
    paths:
      - '*.pdf'

####################################
#   Build PNG 
####################################
build_png:
  <<: *build_artifacts
  stage: build_png
  script:
    - rm *.png
    - make resume.png 
  dependencies: 
    - build_pdf
  artifacts:
    expire_in: '300'
    paths:
      - '*.png'

####################################
#   Deploy
####################################
deploy:
  stage: deploy
  before_script:
    - export RELEASE_TAG=$(date +'%F-%H-%M')
    - "\
      export API_JSON=$(printf \
      '{ \"tag_name\": \"%s\", \
      \"body\": \"%s\", \"draft\": false, \"prerelease\": false }' \
      \"${RELEASE_TAG}\" \"Latest Release of my Resume as of: ${RELEASE_TAG}\")"
    - command -v ssh-agent || INSTALL_PKGS+=" /usr/bin/ssh-agent"
    - command -v ssh-keyscan || INSTALL_PKGS+=" /usr/bin/ssh-keyscan"
    - command -v git || INSTALL_PKGS+=" /usr/bin/git"
    - command -v curl || INSTALL_PKGS+=" /usr/bin/curl"
    - dnf install -y ${INSTALL_PKGS}
    - eval $(ssh-agent -s)
    - echo "$GIT_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan ${GIT_HOST} >> ~/.ssh/known_hosts
  script:
    - git remote set-url origin "git@${GIT_HOST}:${CI_PROJECT_PATH}"
    - git remote -v
    - ssh-add -l
    - git config user.name "Gitlab-CI"
    - git config user.email "git@gitlab.com"
    - git checkout $CI_COMMIT_REF_NAME
    - git add resume.pdf resume-*.png
    - 'git commit -m "[skip ci] Auto Update PNG/PDF files in repository"'
    - git push -u origin $CI_COMMIT_REF_NAME
    - git tag ${RELEASE_TAG}
    - git push --tags
    - curl --data "${API_JSON}" https://api.github.com/repos/${CI_PROJECT_PATH}/releases?access_token=${GITHUB_TOKEN}
    - "\
      for i in resume*.png; do\ 
      curl --user \"xenithorb:${GITHUB_TOKEN}\"\ --header 'Content-Type: image/png'
      -X POST \"https://uploads.github.com/repos/${CI_PROJECT_PATH}/releases/${RELEASE_TAG}/assets?name=${i}\"\
      --upload-file \"${i}\";\
      done"
    - "\
      for i in resume.pdf; do\ 
      curl --user \"xenithorb:${GITHUB_TOKEN}\"\ --header 'Content-Type: application/pdf'
      -X POST \"https://uploads.github.com/repos/${CI_PROJECT_PATH}/releases/${RELEASE_TAG}/assets?name=${i}\"\
      --upload-file \"${i}\";\
      done"
  dependencies:
    - build_pdf
    - build_png
  artifacts:
    paths:
      - '*.png'
      - '*.pdf'